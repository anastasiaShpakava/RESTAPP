package com.leverX.blog.model.dto;

import com.leverX.blog.model.ArticleStatus;
import com.leverX.blog.model.Tag;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Data
@Builder
public class ArticleDto {
    private Integer id;
    private String title;
    private String text;
    private ArticleStatus articleStatus;
    private Integer author_id;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private Set<Tag> tags;


}
//    Когда Вы пишите большие веб приложения — очень важно следить за данными которые будут видеть клиенты.
//        Часто бывает такое что некоторые данные показывать не стоит, некоторые данные лучше показать в измененном,
//        зашифрованном виде. Еще очень важно чтобы слои Вашего приложения были слабо связаны и по возможности, зависели
//        друг от друга по минимум.
//
//        Наше приложение будет иметь слой доступа к базе данных. Который мы к стати, уже написали. Оно будет
//        иметь слой сервисов, где будет происходить вся логика по обработке данных. И еще будет слой контроллер
//        который будет принимать запросы от клиента. Будь то браузер, мобильное приложение и т.д. Для нас это не важно.
//        У нас REST API которое отдает наружу определенные ендпоинты (урлы), которые будут вызывать наши потребители.
//        В рамках нашего задания — мы и есть потребители нашего API.
//
//
//
//        Через слои нашего приложения будут передаваться данные. В нашем случае — это
//        данные об сущности User. Очень важно, чтобы данные с клиента правильно фильтровались
//        и валидировались перед записью в базу данных. И не менее важно, проверять данные на
//        наличие секретной информации перед тем как вернуть их на запросы клиента. Например:
//        у пользователя может быть поле пароль, которое он использует для авторизации на сайт.
//        Нам нужно это поле во время регистрации пользователя и авторизации. Но если это запрос на получение информации о
//        пользователе, пароль возвращать совсем не обязательно.
//
//        Очень распространенным подходом для решения подобной проблемы является использование классов DTO.
//        Если кратко, то DTO — это простой java класс, который служит для передачи данных между слоями. В
//        нашем примере мы можем создать класс UsersDto, у которого будут такие же поля как и в нашей сущности User